@model  IEnumerable<SearchProductViewModel>


<style>
    .text-autocomplete {
        position: relative;
        top: 35px;
        right: 269px;
    }
  
</style>



<div class="col-lg-6 col-12 order-lg-2 order-3 text-lg-left text-right">
    <div class="header_search">
        <div class="header_search_content">
            <div class="header_search_form_container">
                <div class="header_search_form clearfix autocomplete">
                    <input type="search"
                           required="required"
                           class="header_search_input"
                           placeholder="Search for products..."
                           id="myInput"
                           name="product" />

                    @using (Html.BeginForm("ProductDetails", "Shop", FormMethod.Get, new { autocomplete = "off", id="the-form" }))
                    {
                        <input hidden name="id" id="product-id" />
                        <button type="submit"
                                class="header_search_button trans_300"
                                value="Submit" 
                                id="search-btn">
                            <i class="fas fa-search" style="color:#fff"></i>
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /* set class to the div */
                    b.classList.add('text-autocomplete');
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
</script>


<script type="text/javascript">
    var data= @Html.Raw(Json.Encode(Model));

    var productNames = [];
    for (let i = 0; i < data.length; i++) {
        productNames.push(data[i].Name);
    }

    autocomplete(document.getElementById("myInput"), productNames);


    function goSearch() {
       
    }

    myInput.addEventListener("keydown", function (e) {
        if (e.keyCode == 13) {
            var productId = document.querySelector('#product-id');
            var myInput = document.querySelector('#myInput');
            for (let i = 0; i < data.length; i++) {
                if (data[i].Name.includes(myInput.value)) {
                    productId.value = data[i].Id;
                }
            }
            var toSubmit = document.querySelector('#the-form');
            toSubmit.submit();
        }
    })

    var searchBtn = document.querySelector('#search-btn');

    searchBtn.addEventListener("click", function () {
        var productId = document.querySelector('#product-id');
        var myInput = document.querySelector('#myInput');
        for (let i = 0; i < data.length; i++) {
            if (data[i].Name.includes(myInput.value)) {
                productId.value = data[i].Id;
                return true;
            }
        }
    })



</script>


